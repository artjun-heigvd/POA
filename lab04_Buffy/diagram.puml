@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

Field -[hidden]- Random
Random -[hidden]- Renderer
Point -[hidden]- Human

' REMOVE
Action "1" - "1" Humanoid: _target >
' # _target: std::weak_ptr<Humanoid>

Field "1" *-d- "*" Humanoid:  _humanoids >
' - _humanoids: std::list<std::shared_ptr<Humanoid>>

Humanoid "1"*--"1" Point: _position >
' # _position: Point

Humanoid::Iterator "1" -- "0..1" Humanoid: _ptr >
' - _ptr: Humanoid\*

ChaseAction "1" -> "1" Humanoid::Type: > _type
' - _type: Humanoid::Type

Humanoid "1"*-l-"0..1" Action: _action >
' # _action: std::shared_ptr<Action>



' ENDSTATIC





' Objects

abstract class Action {
	
	+ {abstract} execute(f: Field&): void
	+ ~Action()
	+ Action(target: const std::weak_ptr<Humanoid>&)
}

class BiteAction {
	+ BiteAction(target: const std::weak_ptr<Humanoid>&)
	+ execute(f: Field&): void
}

class Buffy {
	+ Buffy(maxX: size_t, maxY: size_t)
	+ getType_const(): Type
	+ getMoveAmount_const(): std::size_t
	+ setAction(f: Field&): void
}

class ChaseAction {
	- _chasedTarget: std::weak_ptr<Humanoid>
	+ ChaseAction(target: const std::weak_ptr<Humanoid>&, chasedTarget: const std::weak_ptr<Humanoid>&)
	+ execute(field: Field&): void
}

class Field {
	
	- _turn: int
	- _width: size_t
	- _height: size_t
	- _nbVampire: size_t
	- _nbHuman: size_t
	+ Field(width: size_t, height: size_t, nbVampire: size_t, nbHuman: size_t)
	+ nextTurn(): bool
	+ getClosest_const(from: const std::shared_ptr<Humanoid>&, type: Humanoid::Type): std::shared_ptr<Humanoid>
	+ getWidth_const(): size_t
	+ getHeight_const(): size_t
	+ getNbVampire_const(): size_t
	+ getNbHuman_const(): size_t
	+ getTurn_const(): int
	+ addHumanoid(hum: const std::shared_ptr<Humanoid>&): void
	+ incrementVampireCount(): void
	+ getHumanoids_const(): std::list<std::shared_ptr<Humanoid>>&
}

class Human {
	+ Human(maxX: size_t, maxY: size_t)
	+ getType_const(): Type
	+ getMoveAmount_const(): std::size_t
	+ setAction(f: Field&): void
}

abstract class Humanoid {
	
	# _alive: bool
	
	+ Humanoid(maxX: size_t, maxY: size_t)
	+ Humanoid(pos: const Point&)
	+ ~Humanoid()
	+ {abstract} setAction(f: Field&): void
	+ executeAction(f: Field&): void
	+ setPosition(p: Point): void
	+ getPosition_const(): Point
	+ isAlive_const(): bool
	+ {abstract} getType_const(): int
	+ {abstract} getMoveAmount_const(): std::size_t
	+ dies(): void
}

class KillAction {
	+ KillAction(target: const std::weak_ptr<Humanoid>&)
	+ execute(f: Field&): void
}

class KillerHumanoid {
	- _range: size_t
	+ KillerHumanoid(pos: const Point&)
	+ findHumanoidToAffect_const(f: const Field&, type: Humanoid::Type): std::pair<std::shared_ptr<Humanoid>, bool>
	+ KillerHumanoid(maxX: size_t, maxY: size_t)
}

class MoveAction {
	+ MoveAction(target: const std::weak_ptr<Humanoid>&)
	+ moveToPosition(targetPos: const Point&): void
}

class MoveRandomAction {
	+ MoveRandomAction(target: const std::weak_ptr<Humanoid>&)
	+ execute(f: Field&): void
}

class Point {
	+ x: size_t
	+ y: size_t
	+ Point(x: size_t, y: size_t)
	+ {static} distance(a: Point, b: Point): size_t
	+ distance(other: Point): size_t
	+ direction_const(other: Point): Point
}

class Random {
	- {static} dev: std::random_device
	- {static} rng: std::mt19937
	+ {static} getRandomPos(minX: std::size_t, maxX: std::size_t, minY: std::size_t, maxY: std::size_t): Point
	+ {static} getRandom(min: std::size_t, max: std::size_t): std::size_t
}

class Renderer {
	+ {static} runSimulationsAndPrintStats(width: size_t, height: size_t, nbVampire: size_t, nbHuman: size_t): void
	+ {static} print(field: const Field&): void
	+ {static} printLine(length: size_t): void
}

class Vampire {
	+ Vampire(maxX: size_t, maxY: size_t)
	+ Vampire(pos: Point)
	+ getType_const(): Type
	+ getMoveAmount_const(): std::size_t
	+ setAction(f: Field&): void
}

enum Humanoid::Type {
	HUMAN
	VAMPIRE
	BUFFY
}

class Humanoid::Iterator {
	
	+ Iterator(ptr: Humanoid*)
	+ operator*_const(): Humanoid&
	+ operator->(): Humanoid*
	+ operator++(): Iterator&
	+ operator++(int): Iterator
	'
	'
}




' Inheritance relationships

Action <|-- KillAction

Action <|-- MoveAction

Humanoid <|-- Human

Humanoid <|-- KillerHumanoid

KillAction <|-- BiteAction

KillerHumanoid <|-- Buffy

KillerHumanoid <|-- Vampire

MoveAction <|-- ChaseAction

MoveAction <|-- MoveRandomAction







' Nested objects

Humanoid +-- Humanoid::Iterator

Humanoid +-- Humanoid::Type



' Free functions


@enduml
