@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

Boat -up-> Bank: is moored to >
Child "*"-->"2" Parent: main, second : std::shared_ptr<Parent>>
Container "1"-->"*" Person: is currently in  <
note "CI: Boat only 2 persons" as ci1
Controller *--"2" Bank: banks
Controller *--"1" Boat: boat
Controller *--"1" Person: pere, mere,julie,jeanne,\npierre, paul,voleur,policier
Thief --> Cop: designatedCop >
RiverGame --> Controller: controls >
'TODO: complete and fix ^^
'TODO: add CI !

' Dirty fix because of RiverGame._actions parsing error
class RiverGame {
	- std::unordered_map<char, std::function<void(std::string param)>>
}

' REMOVE
' - function<void\(param.*\n
' ENDSTATIC





' Objects

class Bank {
	+ Bank(name: std::string)
}

class Boat {
	+ Boat(name: std::string, current: Bank*)
	+ toString_const(): std::string
	+ setNewBank(current: Bank*): void
	+ getCurrentBank_const(): Bank*
	+ canMove_const(): bool
	+ {static} getMaxCapacity(): unsigned
}

class Boy {
	+ Boy(name: std::string, mother: std::shared_ptr<Parent>, father: std::shared_ptr<Parent>)
	+ isValid_const(container: const Container&): Result
}

class Child {
	+ Child(name: std::string, main: std::shared_ptr<Parent>, second: std::shared_ptr<Parent>)
	# parentsPresenceValid_const(container: const Container&): bool
}

class Container {
	- _name: std::string
	+ Container(name: std::string)
	+ isValid_const(): Result
	+ add(p: std::shared_ptr<Person>&): void
	+ remove(p: std::shared_ptr<Person>&): void
	+ findByName(name: const std::string&): std::shared_ptr<Person>
	+ getSize_const(): std::size_t
	+ contains_const(searched: std::shared_ptr<Person>): bool
	+ toString_const(): std::string
	# getOccupants_const(): std::list<std::shared_ptr<Person>>&
	# listToString_const(): std::string
}

class Controller {
	- {static} LEFT: const size_t
	- {static} RIGHT: const size_t
	- movePerson(name: const std::string&, from: Container&, to: Container&): Result
	- personNotFoundMessage_const(name: const std::string&, from: const Container&): std::string
	- Controller()
	+ getInstance(): Controller&
	+ embark(name: const std::string&): Result
	+ disembark(name: const std::string&): Result
	+ moveBoat(): Result
	+ print(): void
}

class Cop {
	+ Cop(std::string)
	+ canDrive_const(): bool
}

class Girl {
	+ Girl(name: std::string, mother: std::shared_ptr<Parent>, father: std::shared_ptr<Parent>)
	+ isValid_const(container: const Container&): Result
}

class Parent {
	+ Parent(std::string)
	+ canDrive_const(): bool
}

class Person {
	- name: std::string
	+ Person(name: std::string)
	+ ~Person()
	+ canDrive_const(): bool
	+ isValid_const(container: const Container&): Result
	+ getName_const(): std::string
}

class Result {
	+ reason: const std::optional<std::string>
	+ status: const bool
	- Result(reason: std::string)
	- Result()
	+ {static} invalid(reason: std::string): Result
	+ {static} correct(): Result&
}

class RiverGame {
	- _shouldExit: bool
	- _prompt : int
	- _gameWon: bool
	- {static} logResultErrorIfFailed(result: const Result&): void
	- {static} showMenu(): void
	+ RiverGame()
	+ run(): void
	+ ~RiverGame()
}

class Thief {

	+ Thief(name: std::string, designatedCop: Cop*)
	+ isValid_const(container: const Container&): Result
}




' Inheritance relationships

Child <|-- Boy

Child <|-- Girl

Container <|-- Bank

Container <|-- Boat

Person <|-- Child

Person <|-- Cop

Person <|-- Parent

Person <|-- Thief







' Nested objects



' Free functions


@enduml
